% ----- B-value Estimation Using the Improved K–M Slope (KMS) Method -----
% ------------------- Based on the “Divide & Conquer” Algorithm -------------------

% Description:
% This MATLAB script estimates the b-value of a seismic catalog using the 
% improved K–M slope (KMS) method. The KMS approach is a novel technique 
% for b-value estimation that leverages visibility graph theory and the 
% divide & conquer (DC) strategy for computational efficiency.

% Input:
% - A vector of magnitudes filtered by the completeness magnitude (Mc).

% Output:
% - Estimated b-value based on the KMS method.

% References:
% 1. Linxuan Li, Gang Luo, and Mian Liu (2023). "The K–M slope: a potential supplement for b-value." 
%    *Seismological Research Letters*.
% 2. Linxuan Li and Gang Luo (2024). "Can we obtain reliable seismic b-values for real-time catalogs?" 
%    *Geophysical Journal International*.
% 3. Xin Lan, Hongming Mo, Shiyu Chen, Qi Liu, and Yong Deng (2015). "Fast transformation from time series 
%    to visibility graphs." *Chaos: An Interdisciplinary Journal of Nonlinear Science*.

% Author:
% Linxuan Li, Wuhan University
% Contact: ll7@caltech.edu | lucas.linxuan.li@gmail.com

% Platform:
% Tested in MATLAB R2020b

%% Example: Replace the following section with your own data
clc; clear;
numEvents = 500;                        % Number of simulated events
trueBValue = 1;                         % True b-value for simulation
randomProb = rand(1, numEvents);       % Uniform random values
magnitudes = -1 / trueBValue * log10(randomProb); % Simulated magnitudes
estimatedBValue = estimateB_KMS(magnitudes);      % Estimate using KMS method

%% Function: KMS b-value estimation
function [bValue_KMS] = estimateB_KMS(magnitudeArray)
    magnitudeArray = reshape(magnitudeArray, 1, []);
    numEvents = length(magnitudeArray);
    
    % Empirical ratio between KMS slope and b-value
    ratio_KMS_to_b = -15.15 * (log10(numEvents))^(-2.14) + 11.85;
    
    slopeSamples = zeros(1, 10); % To store KMS slopes from multiple realizations
    
    for i = 1:10
        interEventTimes = exprnd(1, 1, numEvents - 1);
        occurrenceTimes = [0, cumsum(interEventTimes)]; % Simulated Poisson event times
        
        shuffledIndices = randperm(numEvents); 
        randomizedMagnitudes = magnitudeArray(shuffledIndices); % Randomize event order
        
        % Initialize visibility degree array
        visibilityDegrees = 2 * ones(1, numEvents);
        visibilityDegrees(1) = 1;
        visibilityDegrees(end) = 1;
        
        % Compute visibility degrees using divide & conquer method
        visibilityDegrees = computeVisibilityGraph(occurrenceTimes, randomizedMagnitudes, 1, numEvents, visibilityDegrees);
        
        % Linear fit: slope = KMS
        coeffs = polyfit(randomizedMagnitudes, visibilityDegrees, 1);
        slopeSamples(i) = coeffs(1);
    end
    
    % Convert KMS slope to b-value
    bValue_KMS = mean(slopeSamples) / ratio_KMS_to_b;
end

%% Function: Divide & Conquer Visibility Graph Computation
function [visibilityDegrees] = computeVisibilityGraph(timeSeries, magnitudeSeries, leftIdx, rightIdx, visibilityDegrees)
    [~, localMaxOffset] = max(magnitudeSeries(leftIdx:rightIdx));
    maxIdx = localMaxOffset + leftIdx - 1;

    % Left segment visibility
    for i = leftIdx:maxIdx - 2
        midMagnitudes = magnitudeSeries(i+1:maxIdx-1);
        midTimes = timeSeries(i+1:maxIdx-1);
        
        criticalLine = magnitudeSeries(i) + ...
            (magnitudeSeries(maxIdx) - magnitudeSeries(i)) .* ...
            (midTimes - timeSeries(i)) ./ (timeSeries(maxIdx) - timeSeries(i));
        
        if max(midMagnitudes - criticalLine) < 0
            visibilityDegrees(i) = visibilityDegrees(i) + 1;
            visibilityDegrees(maxIdx) = visibilityDegrees(maxIdx) + 1;
        end
    end

    % Right segment visibility
    for i = maxIdx + 2:rightIdx
        midMagnitudes = magnitudeSeries(maxIdx+1:i-1);
        midTimes = timeSeries(maxIdx+1:i-1);
        
        criticalLine = magnitudeSeries(i) + ...
            (magnitudeSeries(maxIdx) - magnitudeSeries(i)) .* ...
            (midTimes - timeSeries(i)) ./ (timeSeries(maxIdx) - timeSeries(i));
        
        if max(midMagnitudes - criticalLine) < 0
            visibilityDegrees(i) = visibilityDegrees(i) + 1;
            visibilityDegrees(maxIdx) = visibilityDegrees(maxIdx) + 1;
        end
    end

    % Recursive divide & conquer calls
    if leftIdx < maxIdx - 2
        visibilityDegrees = computeVisibilityGraph(timeSeries, magnitudeSeries, leftIdx, maxIdx - 1, visibilityDegrees);
    end
    if rightIdx > maxIdx + 2
        visibilityDegrees = computeVisibilityGraph(timeSeries, magnitudeSeries, maxIdx + 1, rightIdx, visibilityDegrees);
    end
end

